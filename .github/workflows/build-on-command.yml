name: Build on Command

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  build:
    if: contains(github.event.comment.body, '/build-blinkeye')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      working-directory: application
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r REQUIREMENTS.txt

    - name: Build executable
      working-directory: application
      run: pyinstaller --onefile --windowed your_script.py

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-build
        path: application/dist/

  comment:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create initial comment
      env:
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
      run: |
        COMMENT_BODY=$(cat <<EOF
        **Build in Progress:**

        - Linux: :hourglass:
        - macOS: :hourglass:
        - Windows: :hourglass:
        EOF
        )

        echo "$COMMENT_BODY" > comment.md

    - name: Post initial comment
      id: initial_comment
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ env.ISSUE_NUMBER }}
        body: ${{ steps.create_initial_comment.outputs.comment_body }}
        token: ${{ secrets.GITHUB_TOKEN }}
        create-issue-if-not-exists: true

    - name: Update comment with Linux status
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        COMMENT_BODY=$(cat <<EOF
        **Build Status:**

        - Linux: :white_check_mark:
        - macOS: :hourglass:
        - Windows: :hourglass:
        EOF
        )

        echo "$COMMENT_BODY" > comment.md

    - name: Update comment with macOS status
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        COMMENT_BODY=$(cat <<EOF
        **Build Status:**

        - Linux: :white_check_mark:
        - macOS: :white_check_mark:
        - Windows: :hourglass:
        EOF
        )

        echo "$COMMENT_BODY" > comment.md

    - name: Update comment with Windows status
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        COMMENT_BODY=$(cat <<EOF
        **Build Status:**

        - Linux: :white_check_mark:
        - macOS: :white_check_mark:
        - Windows: :white_check_mark:
        EOF
        )

        echo "$COMMENT_BODY" > comment.md

    - name: Post final comment
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ env.ISSUE_NUMBER }}
        body: ${{ steps.create_comment.outputs.comment_body }}
        token: ${{ secrets.GITHUB_TOKEN }}
        comment-id: ${{ steps.initial_comment.outputs.comment-id }}

  artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create artifacts comment
      env:
        ISSUE_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
      run: |
        LINUX_URL=$(echo ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/artifacts/$(jq -r '.artifacts[] | select(.name=="ubuntu-latest-build") | .id' $GITHUB_EVENT_PATH))
        MACOS_URL=$(echo ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/artifacts/$(jq -r '.artifacts[] | select(.name=="macos-latest-build") | .id' $GITHUB_EVENT_PATH))
        WINDOWS_URL=$(echo ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/artifacts/$(jq -r '.artifacts[] | select(.name=="windows-latest-build") | .id' $GITHUB_EVENT_PATH))

        COMMENT_BODY=$(cat <<EOF
        **Build Artifacts:**

        - [Download Linux build]($LINUX_URL)
        - [Download macOS build]($MACOS_URL)
        - [Download Windows build]($WINDOWS_URL)
        EOF
        )

        echo "$COMMENT_BODY" > comment.md

    - name: Post artifacts comment
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ env.ISSUE_NUMBER }}
        body: ${{ steps.create_artifacts_comment.outputs.comment_body }}
        token: ${{ secrets.GITHUB_TOKEN }}
        comment-id: ${{ steps.initial_comment.outputs.comment-id }}
